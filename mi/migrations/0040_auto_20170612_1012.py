# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-06-12 10:12
from __future__ import unicode_literals

from django.db import migrations

def forwards(apps, schema_editor):
    OverseasRegionGroup = apps.get_model('mi', 'OverseasRegionGroup')
    OverseasRegion = apps.get_model('mi', 'OverseasRegion')
    OverseasRegionGroupYear = apps.get_model('mi', 'OverseasRegionGroupYear')
    FinancialYear = apps.get_model('mi', 'FinancialYear')

    fy2016 = FinancialYear.objects.get(id='2016')
    fy2017 = FinancialYear.objects.get(id='2017')
    to_create = []


    # make 2016 region groups
    g2016 = {
        'Europe': [
            'Central European Network',
            'Mediterranean',
            'Nordic Baltic Network',
            'Western Europe',
        ],
        'Near East and North Africa': [
            'Middle East',
            'North Africa',
            'Turkey and Caucasus',
        ],
        'East': [
            'China',
            'North East Asia',
            'South Asia',
        ],
        'South Pacific': [
            'Australia-New Zealand',
            'South East Asia',
        ],
        'Americas': [
            'North America',
            'Latin America',
        ],
        'East, West & South Africa': [
            'East Africa',
            'Southern Africa',
            'West Africa',
        ]
    }
    for group, regions in g2016.items():
        group_instance, _ = OverseasRegionGroup.objects.get_or_create(name=group)
        for region in regions:
            region_instance = OverseasRegion.objects.get(name=region)
            to_create.append(
                OverseasRegionGroupYear(region=region_instance, financial_year=fy2016, group=group_instance)
            )

    # make 2017 region groups
    g2017 = {
        'Africa': [
            'Africa',
            'North Africa',
        ],
        'Asia-Pacific': [
            'Australia-New Zealand',
            'North East Asia',
            'South East Asia',
        ],
        'Central Asia': [
            'Turkey and Caucasus',
        ],
        'China': [
            'China'
        ],
        'Europe': [
            'Central European Network',
            'Mediterranean',
            'Nordic Baltic Network',
            'Western Europe',
        ],
        'Latin America': [
            'Latin America'
        ],
        'Middle East': [
            'Middle East'
        ],
        'North America': [
            'North America'
        ],
        'South Asia': [
            'South Asia'
        ],
    }

    for group, regions in g2017.items():
        group_instance, _ = OverseasRegionGroup.objects.get_or_create(name=group)
        for region in regions:
            region_instance = OverseasRegion.objects.get(name=region)
            to_create.append(
                OverseasRegionGroupYear(region=region_instance, financial_year=fy2017, group=group_instance)
            )

    OverseasRegionGroupYear.objects.bulk_create(to_create)

class Migration(migrations.Migration):

    dependencies = [
        ('mi', '0039_auto_20170612_0958'),
    ]

    operations = [
        migrations.RunPython(forwards, reverse_code=migrations.RunPython.noop)
    ]
